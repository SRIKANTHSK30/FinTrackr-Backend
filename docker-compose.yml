version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fintrackr-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: fintrackr
      POSTGRES_USER: fintrackr
      POSTGRES_PASSWORD: fintrackr_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fintrackr-network

  # FinTrackr Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fintrackr-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://fintrackr:fintrackr_password@postgres:5432/fintrackr?schema=public
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: info
    depends_on:
      - postgres
    volumes:
      - ./logs:/app/logs
    networks:
      - fintrackr-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Migration Service
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fintrackr-migrate
    environment:
      DATABASE_URL: postgresql://fintrackr:fintrackr_password@postgres:5432/fintrackr?schema=public
    command: npx prisma migrate deploy
    depends_on:
      - postgres
    networks:
      - fintrackr-network

volumes:
  postgres_data:
    driver: local

networks:
  fintrackr-network:
    driver: bridge
